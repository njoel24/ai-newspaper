import fs from 'fs';

function renderTemplate(template: string, variables: Record<string, unknown> = {}): string {
  let out = template;
  for (const [k, v] of Object.entries(variables)) {
    out = out.replace(new RegExp(`{{${k}}}`, 'g'), String(v));
  }
  return out;
}

function extractTrendTopics(trendsText?: string): string[] {
  if (!trendsText) return [];
  const lines = trendsText.split('\n');
  const topics: string[] = [];
  for (const l of lines) {
    const m = l.match(/[-*]\s*(.+?)(?:\s*\(|$)/);
    if (m) topics.push(m[1].trim());
  }
  if (topics.length === 0) {
    return trendsText.split(',').map((s) => s.trim()).filter(Boolean);
  }
  return topics;
}

export async function runPrompt(promptFile: string, variables: Record<string, unknown> = {}): Promise<string> {
  try {
    const promptTemplate = fs.readFileSync(promptFile, 'utf8');
    const prompt = renderTemplate(promptTemplate, variables);

    if (promptFile.toLowerCase().includes('planner')) {
      const trends = extractTrendTopics((variables as any).trends || prompt);
      const suggestions = [] as Array<Record<string, string>>;
      for (let i = 0; i < 3; i++) {
        const topic = trends[i] || `Sample Topic ${i + 1}`;
        suggestions.push({
          title: `${topic} — What you need to know`,
          summary: `A short summary about ${topic}.`,
          topic,
        });
      }
      return JSON.stringify(suggestions, null, 2);
    }

    if (promptFile.toLowerCase().includes('writer')) {
      const topic = (variables as any).topic || 'Unknown Topic';
      const angle = (variables as any).angle || '';
      const title = `${topic}${angle ? ` — ${angle}` : ''}`;
      const summary = `A concise summary about ${topic}.`;
      const body = `This is a generated article about ${topic}. ${angle ? `Angle: ${angle}.` : ''}\n\nGenerated by local LLM adapter.`;
      return JSON.stringify({ title, summary, body }, null, 2);
    }

    return prompt;
  } catch (err: any) {
    console.error('Local LLM Adapter Error:', err.message);
    throw { status: 500, message: 'Local LLM adapter error.' };
  }
}

export default { runPrompt };
